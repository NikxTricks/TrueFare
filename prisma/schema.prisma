generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUM Definitions
enum DriverStatus {
  Active
  Inactive
}

enum PaymentMethod {
  Cash
  Card
  UPI
}

enum TripStatus {
  Pending
  Ongoing
  Completed
  Canceled
}

// Models

model User {
  userID       Int          @id @default(autoincrement())
  name         String
  email        String       @unique
  password     String
  createdAt    DateTime     @default(now())
  isDriver     Boolean      @default(false) // Indicates if the user is a driver
  driverStatus DriverStatus? // Status of the user as a driver (Active/Inactive)
  disabled     Boolean      @default(false) // If the user is a driver, this indicates if they are disabled
  location     Json?        // Driver location if they are active { "type": "Point", "coordinates": [longitude, latitude] }

  phoneNumber        String?      // New field for phone number
  isSubscribed Boolean      @default(false) // New field for subscription status

  tripsRider   Trip[]       @relation("RiderTrips")
  tripsDriver  Trip[]       @relation("DriverTrips")
}

model Trip {
  id           Int          @id @default(autoincrement())
  status       TripStatus   @default(Pending)
  source       Json?        // { "type": "Point", "coordinates": [longitude, latitude] }
  destination  Json?        // { "type": "Point", "coordinates": [longitude, latitude] }
  riderID      Int?         // References the User who is the rider
  driverID     Int?         // References the User who is the driver
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  Rider        User?        @relation("RiderTrips", fields: [riderID], references: [userID])
  Driver       User?        @relation("DriverTrips", fields: [driverID], references: [userID])
  Payment      Payment?
}

model Payment {
  id           Int          @id @default(autoincrement())
  method       PaymentMethod
  amount       Float
  tripID       Int          @unique
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  Trip         Trip         @relation(fields: [tripID], references: [id])
}